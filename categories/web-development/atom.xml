<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web development | GuoChen | Blog]]></title>
  <link href="http://blog.hguochen.com/categories/web-development/atom.xml" rel="self"/>
  <link href="http://blog.hguochen.com/"/>
  <updated>2014-07-23T09:29:30+08:00</updated>
  <id>http://blog.hguochen.com/</id>
  <author>
    <name><![CDATA[GuoChen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Django environment optimal setup]]></title>
    <link href="http://blog.hguochen.com/web%20development/2014/07/22/Django-environment-optimal-setup/"/>
    <updated>2014-07-22T17:08:54Z</updated>
    <id>http://blog.hguochen.com/web%20development/2014/07/22/Django-environment-optimal-setup</id>
    <content type="html"><![CDATA[<p><a href="https://www.djangoproject.com">Django</a> is a great web framework based on MVC architecture that allows you to quickly and correctly build and deploy web projects. However, staring a new Django project can be a little daunting and often the wrong setup can lead to long term problems for your project. Here i&rsquo;m sharing with you my preferred workflow on starting a new Django project. A small bit of planning goes a long way towards making life easier!</p>

<h3>Prerequisites</h3>

<p>A working knowledge of python language and Django framework is assumed. You will also have to know <a href="http://git-scm.com">git</a> for version control.</p>

<h3>Install Python</h3>

<p>Head over to <a href="http://python.org">python.org</a> and find the install instructions for your specific OS. For my development environment, i&rsquo;m running MAC OSX Mavericks.</p>

<p>To check you have installed python correctly, type</p>

<pre><code>$ python
</code></pre>

<p>into terminal command line and you should get the following output:</p>

<pre><code>Python 2.7.5 (default, Mar  9 2014, 22:15:05) 
[GCC 4.2.1 Compatible Apple LLVM 5.0 (clang-500.0.68)] on darwin
Type "help", "copyright", "credits" or "license" for more information.
&gt;&gt;&gt;
</code></pre>

<h3>Install pip</h3>

<p><a href="http://pip.readthedocs.org/en/latest/index.html">Pip</a> is a great tool for installing and managing python packages. We are going to use pip to install all third party packages to supplement our project.</p>

<p>The easy way to install pip is to first download <a href="https://bootstrap.pypa.io/get-pip.py">get-pip.py</a>. Then run the following command in the folder with the downloaded file on your terminal:</p>

<pre><code>$ python get-pip.py
</code></pre>

<p>And you are done installing! You can test pip installed correctly with the command:</p>

<pre><code>pip -V
</code></pre>

<p>which shows the version of your pip.</p>

<h3>Install virtualenv</h3>

<p><a href="http://virtualenv.readthedocs.org/en/latest/">Virutalenv</a> is a great tool to sandbox your development environments so you don&rsquo;t have to switch back and forth between different versions of softwares. What&rsquo;s more, the excellent extension <a href="http://virtualenvwrapper.readthedocs.org/en/latest/">virtualenvwrapper</a> makes using virtualenv alot easier. This is common, recommend practice among python, Django users alike.</p>

<p>We are also going to use <a href="https://pypi.python.org/pypi">pip</a> to install packages.</p>

<p>First, let&rsquo;s install virtualenv. Note that you can get both virtualenv and virtualenvwrapp install just by install ing virtualenvwrapper.</p>

<pre><code>$ pip install virtualenvwrapper
</code></pre>

<p>After it&rsquo;s installed, add following lines to your .bashrc file:</p>

<pre><code>export WORKON_HOME=$HOME/.virtualenvs
export PROJECT_HOME=$HOME/directory-you-do-development-in
source /usr/local/bin/virtualenvwrapper.sh
</code></pre>

<p>Then type the following command to &lsquo;activate&rsquo; your modified .bashrc file:</p>

<pre><code>$ source .bashrc
</code></pre>

<h3>Creating new environment</h3>

<p>To create a new virtual environment, type:</p>

<pre><code>$ mkvirtualenv django_project
</code></pre>

<p>where django_project is whatever name your project is. You should see your shell is now prepended by (django_project).</p>

<p>The django_project prepending is a reminder that you are using virtualenv instal of your system&rsquo;s Python installation. To exit, the virtual environment, simple type deactivate. When you want to resume work on your project, it&rsquo;s as easy as typing</p>

<pre><code>$ workon django_project
</code></pre>

<p>Where you run the command doesn&rsquo;t matter.</p>

<h3>Install Django</h3>

<p>Since we are working in virtualenv, we have to install Django into this virtual environment. This makes sure that the version of Django we use for this project is not confused with other versions used by the system or other virtual environments.</p>

<pre><code>$ pip install django
</code></pre>

<p>This should give you the latest version of Django which will be installed in your virtualenv area. You can confirm this by doing:</p>

<pre><code>$ which django-admin.py
</code></pre>

<p>Which should point to your $HOME/.virtualenvs/ directory.</p>

<h3>Setup project folder</h3>

<p>Now we can create our project directory. I highly recommend using <a href="https://github.com/twoscoops/django-twoscoops-project">two scoops Django</a> project template for all Django projects. If you are new to two scoops django, it is actually a compilation of some of the best practices for developing Django projects. You can purchase a copy of this amazing book <a href="http://twoscoopspress.org/">here</a>.</p>

<p>Now go ahead and setup the project with this command:</p>

<pre><code>$ django-admin.py startproject --template=https://github.com/twoscoops/django-twoscoops-project/archive/master.zip --extension=py,rst,html django_project
</code></pre>

<p>Note that this command creates a django_project directory with the two scoops django template. I&rsquo;ll leave you to read more about <a href="https://github.com/twoscoops/django-twoscoops-project">two scoops django template</a> yourself.</p>

<h3>Source control</h3>

<p>Git is automatically installed in your virtual environment when you created it with virtualenvwrapper earlier.</p>

<p>Since our folder and file structure is up now, let&rsquo;s commit them to source control right from the start. Here&rsquo;s how to do that in git:</p>

<pre><code>$ git init
</code></pre>

<p>Creates a git repository in the current directory. Now let&rsquo;s stage all of our files to git to be commited.</p>

<pre><code>$ git add django_project
</code></pre>

<p>Now we commit them to our new repository:</p>

<pre><code>$ git commit -m "Initial commit of django_project"
</code></pre>

<p>Let&rsquo;s add the remote repository in <a href="http://github.com">github</a>:</p>

<pre><code>$ git remote add origin &lt;remote repository URL&gt;
</code></pre>

<p>Finally, let&rsquo;s push our changes!</p>

<pre><code>$ git push origin master
</code></pre>

<h3>South for database migrations</h3>

<p>South is a great tool that detects changes to your models layer and automatically sync the changes to your database without you having to dabble with the database itself. This is done through a migration file that South creates. This lets you both migrate the database forward for new change and backward to undo a change or series of changes.</p>

<p>In our virtualenv, install south using pip:</p>

<pre><code>$ pip install south
</code></pre>

<p>Then setup south with the project by adding it to our INSTALLED_APPS in settings/base.py file for the project.
After which, run the command:</p>

<pre><code># python manage.py syncdb
</code></pre>

<p>to sync the changes and south will be registered along with the project. South will also automatically setup the database with the tables it needs.</p>

<p>Before we commit, we will want tot rack our install Python packages. We want to track the name and version of the python packages we are using so we can recreate our environment easily in the production area. There&rsquo;s a pip command that does this:</p>

<pre><code>$ pip freeze &gt; requirements.txt
</code></pre>

<p>I pushed the output of pip freeze to a file called requirements.txt which we will add to source control so we always have an updated list of packages being used.</p>

<p>As before, we commit the changes to git and push to remote repository.</p>

<h3>Install Fabric</h3>

<p>To easily deploy a Django application, we use <a href="http://fabric.readthedocs.org/en/1.3.3/api/contrib/django.html">Fabric</a>. Fabric has a number of purposes but it really helps in quick deployments. Install Fabric with the command:</p>

<pre><code>$ pip install fabric
</code></pre>

<p>Fabric expects a fabfile.py which defines all of the actions we can take. Let&rsquo;s create that file and put the following in fabfile.py in your project&rsquo;s root directory.</p>

<pre><code>from fabric.api import local

def prepare_deployment(branch_name):
local('python manage.py test django_project')
local('git add -p &amp;&amp; git commit') # or local('hg add &amp;&amp; hg commit')
</code></pre>

<p>This will run the test and commit your changes only if your tests pass. A simple &ldquo;pull&rdquo; in your production area becomes your deployment. Let&rsquo;s add the following code to fabfile.py to actually deploy:</p>

<pre><code>from fabric.api import lcd, local

def deploy():
with lcd('/path/to/my/prod/area/'):

    # With git...
    local('git pull /my/path/to/dev/area/')

    # With Mercurial...
    local('hg pull /my/path/to/dev/area/')
    local('hg update')

    # With both
    local('python manage.py migrate myapp')
    local('python manage.py test myapp')
    local('/my/command/to/restart/webserver')
</code></pre>

<p>This will pull your changes from the development master branch, run any migrations you&rsquo;ve made, run tests, and restart your web server.</p>

<p>To use this file, we simply type the following in production environment:</p>

<pre><code>$ fab prepare_deployment
$ fab deploy
</code></pre>

<p>So that&rsquo;s it! The skeleton for an optimal django environment is setup and ready to be developed! Remember, commit often, test everything. Let me know if i&rsquo;ve missed out something! Rock on folks!</p>

<p>P/S: For your convenience, i have setup a <a href="https://github.com/hguochen/django_template">django_template</a> on github based on the above instructions. You may wish to fork it for your own use!</p>

<p>EDIT: Thanks to Chng Nai Yun, i&rsquo;ve corrected a silly error which incorrectly states that git is installed when you install virtualenvwrapper. In reality, git is only installed when you setup the virtualenv environment.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Steps to solving programming problems]]></title>
    <link href="http://blog.hguochen.com/programming/web%20development/2014/06/04/Steps-to-solving-programming-problems/"/>
    <updated>2014-06-04T16:07:39Z</updated>
    <id>http://blog.hguochen.com/programming/web%20development/2014/06/04/Steps-to-solving-programming-problems</id>
    <content type="html"><![CDATA[<p>If you are looking for a systematic approach to solving programming problems, i have one for you here. This is my variation from the <a href="http://www.coursehero.com/file/7263502/Programing-with-the-problem-Analysis-Coding-Execution-Cycle/">Problem analysis coding execution cycle</a> that typical computer science class will teach. Hope it will be of use to you!</p>

<h2>Problem analysis coding execution cycle</h2>

<h3>1. Analyse the problem</h3>

<h5>a. Problem specification</h5>

<p><em>What is the problem asking for?</em></p>

<h5>b. Requirements</h5>

<p><em>What are the constraints and requirements?</em></p>

<h5>c. Assumptions</h5>

<p><em>What are the underlying assumptions on the question?</em></p>

<p><em>Is there any assumptions which could be challenged?</em></p>

<h5>d. Sample test cases</h5>

<p><em>Identify at least 1 sample test case.</em></p>

<p><em>How many test cases should there be minimally?</em></p>

<h5>e. Determine input &amp; output</h5>

<p><em>Determine the input and output and their corresponding data types</em></p>

<h5>f. Identify input boundary cases</h5>

<p><em>List out all boundary cases for inputs and logic flows.</em></p>

<h3>2. Implement the algorithm</h3>

<h5>a. Algorithm structure</h5>

<p><em>What is the best data structure and data types for this problem?</em></p>

<h5>b. Design Algorithm</h5>

<p><em>Write algorithm in plain english or pseudo code.</em></p>

<p><em>Identify repeated patterns if any.</em></p>

<h5>c. Testing algorithm correctness</h5>

<p><em>Verbally run through the algrithm with pre-defined test cases</em></p>

<h5>d. Write code</h5>

<p><em>Write code incrementally with adequete tests at each step.</em></p>

<h5>e. Test code correctness</h5>

<p><em>Run the code with sample inputs to test for desired outputs.</em></p>

<h5>f. Testing boundary cases</h5>

<p><em>Run the code with boundary cases and lookout for unexpected behaviors.</em></p>

<h5>d. Verify program correctness</h5>

<p><em>Re-visit the question and and lookout for inconsistencies  and redundancies.</em></p>

<h3>3. Program maintenance</h3>

<h5>a. Determine time complexity</h5>

<p><em>What is the average case complexity?</em></p>

<p><em>What is the worst case complexity?</em></p>

<h5>b. Determine space complexity</h5>

<p><em>Are there redundant or unused variables?</em></p>

<h5>c. Refactoring</h5>

<p><em>Can the code be refactored to improve readability?</em></p>

<p><em>Can the algorithm be redesigned to improve efficiency?</em></p>

<h5>d. Documentation</h5>

<p><em>Leave comments where the abstraction logic is unclear.</em></p>

<p><em>Are there any trivial comments?</em></p>

<p><em>Write formal documentations if the program is expected to be used by people.</em></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Reverse a singly linked list]]></title>
    <link href="http://blog.hguochen.com/web%20development/2014/05/26/Reverse-a-linked-list/"/>
    <updated>2014-05-26T21:01:58Z</updated>
    <id>http://blog.hguochen.com/web%20development/2014/05/26/Reverse-a-linked-list</id>
    <content type="html"><![CDATA[<p>I came across this interesting programming question today and decided to give it a go. Given a singly linked list, with reference to the head node, reverse the linked list so the head node becomes the last node and vice versa.</p>

<p>This is my iterative solution:</p>

<pre><code>public Node reverse(Node head) {
    if (head == null || head.next == null) { // Linked list is empty or only has 1 node
        return;
    }
    Node current = new Node();
    Node next = new Node();
    Node prev = null;

    current = head; // current node starts at the first node, which is referenced by head. keep in mind that head acts like a pointer here instead of a real node
    while(current != null) { //run loop as long as current node is not the last node
        next = current.next; // stores a reference of the next node so we can manipulate current.next reference
        current.next = prev; // point the current.next to the new reference position -which is in reverse order
        prev = current; // prev has done its job of referencing the previous node, it now moves on to reference the subsequent node
        current = next; // current has referenced in the new order, move current pointer to the next node - which is referenced by next pointer.
    }
    head = prev; // the last node is now the new first node in the linked list, so we reference head to prev, which points to the node itself
    return head
}
</code></pre>

<p>Now let&rsquo;s try the recursive solution:</p>

<h3>Identify base case</h3>

<p>The base case occurs when we reach the last node of the linked list. We identify this case by verifying that current.next is NULL.</p>

<h3>Base case operation</h3>

<p>In the base case, we need to set the head pointer to the very last node, which will in turn become the first node in the result.</p>

<p>Here&rsquo;s my recursive answer:</p>

<pre><code>public Node reverse(Node current) {
    if (current == null) { //check for empty list
        return;
    }

    if (current.next == null) { // at tail node, this is recursive base case
        head = current; // set head to point to the last node in original list
        return;
    }

    reverse(current.next);
    current.next.next = current; // set the subsequent node as the current node
    current.next = null; // set the previous node to null. which eventually means the older next pointer is used and null
}
</code></pre>

<p>This little devil took me quite awhile to figure out as it&rsquo;s very confusing between the reference pointers and the current nodes in question. But in practicality, i just can&rsquo;t imagine a scenario where i&rsquo;ll need to reverse a singly linked list. Can you? Whatever, this also proves that as a norm, we should just use a double linked list in the rare case we need to do a reversal like this. Time complexity of both of the solutions are O(n).</p>

<p>Edit: On a side note, we can also do a shallow copy of the linked list to an array-like data structure, use a reverse() function and push into a fresh linked list. Horrible on the space complexity, but alot easier to understand.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Designing Beebeta]]></title>
    <link href="http://blog.hguochen.com/design/web%20development/2014/04/01/Designing-Beebeta/"/>
    <updated>2014-04-01T11:48:00Z</updated>
    <id>http://blog.hguochen.com/design/web%20development/2014/04/01/Designing-Beebeta</id>
    <content type="html"><![CDATA[<p>A recent side project of mine, Beebeta, is about to launch its MVP. I was involved in both the frontend and backend engineering of Beebeta. Check out Beebeta&rsquo;s stack at <a href="http://blog.hguochen.com/web%20development/2014/03/31/Beebeta-Engineering/">Beebeta Engineering</a>.</p>

<p>Being new to the world of frontend designing, i&rsquo;m not sure if my design would be used eventually. But still, i would like to share my frontend design experience and concepts in this post. Partly to document my design journey but more importantly, encourage other programmers(like me) to pick up web designing in their free time.</p>

<h2>What is Beebeta?</h2>

<p>Search engines are vast, and non-targeted. While you will definitely be able to find valuable facts and informations on topics, it is not built to reflect the public&rsquo;s opinions on questions at hand. That&rsquo;s what Beebeta is for. It gives you insights to what the crowd thinks about an issue. Which could be questions as trivial as &lsquo;Which restaurant serves the best Ramen?&rsquo; or global issues such as &lsquo;Should gay marriage be allowed?&rsquo;.</p>

<h2>Design Goal</h2>

<p>With the above concept, it is evident that Beebeta is all about polling the public with questions. We are going to implement this by asking users questions and offer pre-determined choices for voting. Users may also add additional choices if they like. Here are a few design goals i&rsquo;ve charted out:</p>

<ul>
<li>Questions are the prime content of the website</li>
<li>All visual elements should contribute to better contents</li>
<li>User&rsquo;s Call To Action(CTA) is voting and should be encouraged visually</li>
<li>Page should be simple and minimalistic</li>
</ul>


<h2>Research and idea generation</h2>

<p>Do some googling to get the creativity juices flowing. These are some of the places i checkout to brainstorm design ideas:</p>

<ul>
<li><a href="http://pinterest.com">Pinterest</a></li>
<li><a href="http://smashingmagazine.com">Smashing Magazine</a></li>
<li><a href="http://quora.com">Quora</a></li>
<li><a href="http://createivebloq.com">Creative Bloq</a></li>
</ul>


<p>I usually grab a pencil and sketchbook to jot down some of the things such as essential page elements, layout, colors, typefaces and navigation details. Sometimes i feel particularly artistic and try to draw&hellip;</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/Mobile%20Uploads/EBAE3B09-C994-459F-AEB7-9964CA67A066.jpg" width="300" alt="doodle" /></p>

<p>Ok fine i admit calling it &lsquo;drawing&rsquo; is an overstatement. Very-very crude mockups.</p>

<h2>Design</h2>

<p>All my page designs start from mockups. From grid layout, to box structure and eventually down to individual elements. For each step of this process, i pay attention to how elements in question interacts with each other and establish cohesiveness.</p>

<h3>Grid Layout</h3>

<p>I adopted the 12-grid system for <a href="http://getbootstrap.com/">Bootstrap 3</a>. Boostrap 3 is designed &lsquo;mobile first&rsquo;. It&rsquo;s newly renovated grid system caters to a whole array of digital devices from mobile phone to high resolution desktops. A nice tutorial about the new grid system for Bootstrap is found <a href="http://scotch.io/bar-talk/understanding-the-bootstrap-3-grid-system">here</a>.</p>

<p>I used the following grid dimensions:</p>

<pre><code>/* 12 col responsive grid */

.row {
    clear: both;
    max-width: 1040px;
    margin: 0 auto;
}

[class^="col-"]:last-child {
    margin: 0;
}

[class^="col-"] {
    float: left;
    margin: 0 3.84615384615% 0 0;
    list-style: none;
    position: relative;
}


.col-xs-1 { width: 4.8076923077% }
.col-xs-2 { width: 13.4615384615% }
.col-xs-3 { width: 22.1153846154% }
.col-xs-4 { width: 30.7692307692% }
.col-xs-5 { width: 39.4230769231% }
.col-xs-6 { width: 48.0769230769% }
.col-xs-7 { width: 56.7307692308% }
.col-xs-8 { width: 65.3846153846% }
.col-xs-9 { width: 74.0384615385% }
.col-xs-10 { width: 82.6923076923% }
.col-xs-11 { width: 91.3461538462% }
.col-xs-12 { width: 100%; margin: 0 }
</code></pre>

<h3>Typeface</h3>

<p>I think typeface of a website determines the longevity and pleasure of browsing its contents. Good typefaces gives readability and allows you to focus on the content. For beebeta, i used <strong>serif</strong> typeface for block headers and <strong>helvetica neue</strong> for body texts. These are generally pretty safe typefaces for websites.</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at30154pm.png" alt="beebeta icon" /></p>

<p>The Beebeta typeface in the icon is given to me pre-designed as <strong>OratorStd</strong>.</p>

<h3>Colour</h3>

<p>I used 3 colors as the theme of Beebeta. 2 triad colors, <strong>#4288CA</strong>(Celestial Blue) &amp; <strong>#5CB85C</strong>(Fern) and 1 neutral color <strong>#F0F0F0</strong>(Beige Grey).</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at31235pm.png" width="500" alt="color theme" /></p>

<p><strong>Fern green</strong> is used for navigational contents and Call To Action(CTA) activites users performs.</p>

<p>Netural color <strong>Beige Grey</strong> will make the base color of the site. This effectively allows focus on contents without too much &lsquo;noise&rsquo; from the background.</p>

<p><strong>Celestial Blue</strong> are used as cordoned containers for user details and personal spaces within the site.</p>

<p>Effectively the site is just a mix and match of these 3 simple colours.</p>

<h3>Navigation</h3>

<p>Navigation determines the usability of the site. For our Minimum Viable Product(MVP), which has limited features, i want users to understand the purpose of the website at a glance through navigational bar without having it competing for user attention from the contents. Since posting questions is fundamental to the site. It should have a visual focus primarily, with user utility functions available nearby. Here is how it looks:</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at125833pm.png" width="700" alt="navigation bar" /></p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at33130pm.png" width="700" alt="navigation bar 2" /></p>

<h3>Header</h3>

<p>I wanted a simple header without any unnecessary contents. It should be so painfully simple that it looks almost undesigned at all. I think the benefits of a bare-bone header drives clarity. That users don&rsquo;t derive too much assumptions of the contents of the website based on header. It invites users browse to find out more. Here&rsquo;s how it looks like:</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at33337pm.png" width="600" alt="header" /></p>

<p>I am experimenting with color-coding of question categories here. Each category is assigned a colour. My aim is to promote category classifications so users sub-consciously associate a colour to a category. I&rsquo;m guessing this will contribute to an easier browsing experience over time.</p>

<h3>Question Card</h3>

<p>Question card is the main content. It is what beebeta is all about. My design concept for questions takes the form of &lsquo;question cards&rsquo;. Each poll question is a unique question card served.</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at34610pm.png" width="600" alt="question card" /></p>

<p>In order to synchronise the color-coding category concept earlier, i added a subtle colour border for each question card of its associated category. The question card displays the question text, user uploaded image, uploader&rsquo;s name, number of choices and number of votes received so far.</p>

<h3>Voting</h3>

<p>I adopted the classic reddit style voting which allows users to vote up a choice and provide a visual feedback with updated vote count and fern green arrow up button.</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at40029pm.png" width="200" alt="voting" /></p>

<h3>Profile page</h3>

<p>As an extension of the &lsquo;question card&rsquo; concept, i gave a similar box style to profile page. Users have 3 profile boxes which is unique to them, namely User Information, Questions and Votes counts.</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at40212pm.png" width="500" alt="profile page" /></p>

<p>The following tab, My questions, allows users to view and edit his posted questions.</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at40736pm.png" width="500" alt="my questions" /></p>

<h3>Footer</h3>

<p>I&rsquo;ve choosen flat white for footer, which colour synchronises with the header. Again, i&rsquo;m experimenting with using lighter colours as opposed to heavy colors for headers and footers.</p>

<p><img src="http://i1113.photobucket.com/albums/k508/houguochen/ScreenShot2014-03-31at40922pm.png" width="700" alt="footer" /></p>

<p>So that&rsquo;s it folks! If you think that this design is really basic, you are right! I do agree that there are alot more to be done with the design of a polling site like Beebeta. I would like to hear your comments and suggestions on how i can improve my design. Peace out! :)</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Beebeta Engineering]]></title>
    <link href="http://blog.hguochen.com/web%20development/2014/03/31/Beebeta-Engineering/"/>
    <updated>2014-03-31T16:19:30Z</updated>
    <id>http://blog.hguochen.com/web%20development/2014/03/31/Beebeta-Engineering</id>
    <content type="html"><![CDATA[<p><a href="https://www.facebook.com/leeagustiadi">Agus</a> and <a href="https://www.facebook.com/jaielhaevin">Joel</a> conceptualized the Beebeta project sometime ago and invited me to handle the technical aspect of it. I didn&rsquo;t know what Beebeta was then but the moment i heard of the idea, i loved it! We spent our valuable weekends hacking out Beebeta and we are going to release it very soon! <a href="http://www.beebeta.com">Beebeta v1.0</a> is finally out for public thrashing and hating! Ok but please be nice :(</p>

<p>Having architected the Beebeta backend, i thought it would be fun to give an idea of Beebeta from an engineering perspective. This is how we think an online polling system should be built. Feel free to disagree, we would love to hear your opinions :)</p>

<p>In short, Beebeta is a web platform to gather crowdsourced knowledge. It is an online timeless repository of public opinions which is easily accessible through a poll-like web interface.</p>

<h3>Why Beebeta?</h3>

<p>Search engines are vast, and non-targeted. While you will definitely be able to find valuable facts and informations on topics, it is not built to reflect the public&rsquo;s opinions on questions at hand. That&rsquo;s what Beebeta is for. It gives you insights to what the crowd thinks. Which could be questions as trivial as &lsquo;Which restaurant serves the best Ramen?&rsquo; or global issues such as &lsquo;Should gay marriage be allowed?&rsquo;.</p>

<p>Ok so much for pitching, that&rsquo;s not the purpose of this post. We are here for the nerd stuff arn&rsquo;t we?</p>

<h3>Engineering Goal</h3>

<p>Throughout the implementation of Beebeta, we had a few goals in mind:</p>

<ol>
<li>Don&rsquo;t do unnecessary stuff</li>
<li>Don&rsquo;t reinvent the wheel</li>
<li>Be versatile in technology options</li>
</ol>


<h3>OS/Hosting</h3>

<p>Beebeta runs Ubuntu 13.10(Saucy Salamander) on Amazon EC2. We tried Linux AMI(CentOS) on EC2 but find the environment not as usable as Ubuntu, plus the software updates were not consistently updated. Also, stress tests on the CentOS server resulted in unpredictable crashes. Since Beebeta is a small project, we ruled out self-hosting as an option. We definitely don&rsquo;t want to waste time setting up servers ourselves.</p>

<h3>Load Balancing</h3>

<p>All server requests goes through our load balancers. We use Amazon&rsquo;s Elastic Load Balancer(ELB) with 2 Nginx instances behind it. I admit now may be abit too early to devote load balancing resources but in case of unexpected traffic spikes, it will be good to pick up from here and scale instead of getting caught off-guard. I skipped using anything to handle the DNS though. But i may revisit the issue with Amazon&rsquo;s Route53 in future.</p>

<h3>Application Server</h3>

<p><a href="https://www.python.org/download/releases/2.7.5/">Python 2.7.5</a> and <a href="https://www.djangoproject.com/">Django 1.6.2</a> was used on Amazon micro-instance machines. To encourage decoupling with the machine itself, we used <a href="http://www.virtualenv.org">virtualenv</a> to sandbox the development environment. As such, the machines become stateless and we can easily spring up more instances and deploy direct when it comes to scaling up. Dedicated IP is also allocated to the instance. I&rsquo;m guessing that most of the requests would be CPU-intensive than memory-intensive, so at the moment, a micro-instance would suffice.</p>

<p>Mod_wsgi is used as our WSGI server, together with Apache and Mysql. A typical LAMP stack. I&rsquo;m exploring the possibility of shifting to <a href="http://gunicorn.org">Gunicorn</a> in future. I read some tutorials on gunicorn and found it easier to configure. But the standard mod_wsgi is good for now.</p>

<h3>Data storage</h3>

<p>Meta-data&rsquo;s such as tags, url strings etc lives in MySql table rows.</p>

<p>Our BLOB data lives in Amazon&rsquo;s S3 standard storage. I thought of using glacier storage for original files and standard storage for rendered files but unfortunately S3 does not provide glacier storage in Singapore region yet. I forsee using glacier storage would cut costs by about 30% for every 10GB of data. Will keep in view for future changes, once glacier storage is opened up in Singapore. Content Distribution wise, we use <a href="http://aws.amazon.com/cloudfront">Amazon CloudFront</a>, which helps with page load times from users at different parts of the world.</p>

<p>Caching wise, we use memcached and currently have 1 memcached instance, which is connected to using pylibmc &amp; libmemcached. I&rsquo;m aware there&rsquo;s <a href="http://aws.amazon.com/elasticache/">Amazon&rsquo;s Elastic Cache</a> service for this, but i havent got around to reading up on that yet.</p>

<h3>Django apps</h3>

<p>As part of our goal not to reinvent the wheel. we used quite a few out-of-the-box django apps to facilitate building of Beebeta platform.</p>

<p><a href="http://boto.readthedocs.org/en/latest/ref/s3.html">S3Boto</a> is used to connect the server scripts with different Amazon web services seamlessly.</p>

<p><a href="http://pythonhosted.org/django-analytical/services/mixpanel.html">Django-analytical</a> is used to track various site metrics on the application itself.</p>

<p><a href="https://pypi.python.org/pypi/django-debug-toolbar">Django-debug-toolbar</a>(my favourite debugging tool!) is used on development environments for almost all debugging tasks.</p>

<p><a href="https://pypi.python.org/pypi/django-pagination">Django-pagination</a> is used to paginate database querysets into proper pages.</p>

<p><a href="http://south.readthedocs.org/en/latest/">Django-south</a> is used to easily perform database migration tasks between ORM and the database itself.</p>

<p><a href="https://bitbucket.org/ubernostrum/django-registration/">Django-registration</a> is used to handle user registration/login/logout issues.</p>

<h3>Monitoring</h3>

<p>We are using <a href="https://mixpanel.com">Mixpanel</a> to track user activites on the site. These tracking statistics are filtered up to 2 timeless campaigns. First campaign to track site traffic activites such as page traffic, user sign ups etc. Second campaign to track question and choices interactions of all questions on the site. At any one time we will know which questions are most popular or which group of users are most active at different times of the day.</p>

<p>For backend monitoring, we are using <a href="http://newrelic.com">New Relic</a> to track application performance and server performance. We establish a certain threshold for performance issues on both of these assets and issue warning emails to administrators when the threshold is almost reaching.</p>

<p>For Python error reporting, we use <a href="http://sentry.readthedocs.org/en/latest/">Sentry</a>, an open-source Django app written by the <a href="http://disqus.com">Disqus</a> folks. We can closely monitor error messages at real-time relatively easy with this handy tool.</p>

<h3>What&rsquo;s your stack?</h3>

<p>That&rsquo;s so much for Beebeta stack. Feel free to leave your comments below if you think we&rsquo;ve made a terrible mistake. Otherwise, I&rsquo;d love to hear how you implement your stacks!</p>

<p>Lastly, i&rsquo;ve been playing this song on repeats all day in my coding time. It just energizes me for the tasks at hand. Hope you like it too! :)</p>

<p><iframe width="560" height="420" src="http://www.youtube.com/embed/c_H3MWVx6JU?color=white&theme=light"></iframe></p>
]]></content>
  </entry>
  
</feed>
