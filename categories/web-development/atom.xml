<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: web development | GuoChen | Blog]]></title>
  <link href="http://blog.hguochen.com/categories/web-development/atom.xml" rel="self"/>
  <link href="http://blog.hguochen.com/"/>
  <updated>2014-03-31T16:34:40+08:00</updated>
  <id>http://blog.hguochen.com/</id>
  <author>
    <name><![CDATA[GuoChen]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Beebeta Engineering]]></title>
    <link href="http://blog.hguochen.com/web%20development/2014/03/31/Beebeta-Engineering/"/>
    <updated>2014-03-31T16:19:30Z</updated>
    <id>http://blog.hguochen.com/web%20development/2014/03/31/Beebeta-Engineering</id>
    <content type="html"><![CDATA[<p><a href="https://www.facebook.com/leeagustiadi">Agus</a> and <a href="https://www.facebook.com/jaielhaevin">Joel</a> conceptualized the Beebeta project sometime ago and invited me to handle the technical aspect of it. I didn&rsquo;t know what Beebeta was then but the moment i heard of the idea, i loved it! We spent our valuable weekends hacking out Beebeta and we are going to release it very soon! <a href="http://www.beebeta.com">Beebeta v1.0</a> is finally out for public thrashing and hating! Ok but please be nice :(</p>

<p>Having architected the Beebeta backend, i thought it would be fun to give an idea of Beebeta from an engineering perspective. This is how we think an online polling system should be built. Feel free to disagree, we would love to hear your opinions :)</p>

<p>In short, Beebeta is a web platform to gather crowdsourced knowledge. It is an online timeless repository of public opinions which is easily accessible through a poll-like web interface.</p>

<h3>Why Beebeta?</h3>

<p>Search engines are vast, and non-targeted. While you will definitely be able to find valuable facts and informations on topics, it is not built to reflect the public&rsquo;s opinions on questions at hand. That&rsquo;s what Beebeta is for. It gives you insights to what the crowd thinks. Which could be questions as trivial as &lsquo;Which restaurant serves the best Ramen?&rsquo; or global issues such as &lsquo;Should gay marriage be allowed?&rsquo;.</p>

<p>Ok so much for pitching, that&rsquo;s not the purpose of this post. We are here for the nerd stuff arn&rsquo;t we?</p>

<h3>Engineering Goal</h3>

<p>Throughout the implementation of Beebeta, we had a few goals in mind:</p>

<ol>
<li>Don&rsquo;t do unnecessary stuff</li>
<li>Don&rsquo;t reinvent the wheel</li>
<li>Be versatile in technology options</li>
</ol>


<h3>OS/Hosting</h3>

<p>Beebeta runs Ubuntu 13.10(Saucy Salamander) on Amazon EC2. We tried Linux AMI(CentOS) on EC2 but find the environment not as usable as Ubuntu, plus the software updates were not consistently updated. Also, stress tests on the CentOS server resulted in unpredictable crashes. Since Beebeta is a small project, we ruled out self-hosting as an option. We definitely don&rsquo;t want to waste time setting up servers ourselves.</p>

<h3>Load Balancing</h3>

<p>All server requests goes through our load balancers. We use Amazon&rsquo;s Elastic Load Balancer(ELB) with 2 Nginx instances behind it. I admit now may be abit too early to devote load balancing resources but in case of unexpected traffic spikes, it will be good to pick up from here and scale instead of getting caught off-guard. I skipped using anything to handle the DNS though. But i may revisit the issue with Amazon&rsquo;s Route53 in future.</p>

<h3>Application Server</h3>

<p><a href="https://www.python.org/download/releases/2.7.5/">Python 2.7.5</a> and <a href="https://www.djangoproject.com/">Django 1.6.2</a> was used on Amazon micro-instance machines. To encourage decoupling with the machine itself, we used <a href="http://www.virtualenv.org">virtualenv</a> to sandbox the development environment. As such, the machines become stateless and we can easily spring up more instances and deploy direct when it comes to scaling up. Dedicated IP is also allocated to the instance. I&rsquo;m guessing that most of the requests would be CPU-intensive than memory-intensive, so at the moment, a micro-instance would suffice.</p>

<p>Mod_wsgi is used as our WSGI server, together with Apache and Mysql. A typical LAMP stack. I&rsquo;m exploring the possibility of shifting to <a href="http://gunicorn.org">Gunicorn</a> in future. I read some tutorials on gunicorn and found it easier to configure. But the standard mod_wsgi is good for now.</p>

<h3>Data storage</h3>

<p>Meta-data&rsquo;s such as tags, url strings etc lives in MySql table rows.</p>

<p>Our BLOB data lives in Amazon&rsquo;s S3 standard storage. I thought of using glacier storage for original files and standard storage for rendered files but unfortunately S3 does not provide glacier storage in Singapore region yet. I forsee using glacier storage would cut costs by about 30% for every 10GB of data. Will keep in view for future changes, once glacier storage is opened up in Singapore. Content Distribution wise, we use <a href="http://aws.amazon.com/cloudfront">Amazon CloudFront</a>, which helps with page load times from users at different parts of the world.</p>

<p>Caching wise, we use memcached and currently have 1 memcached instance, which is connected to using pylibmc &amp; libmemcached. I&rsquo;m aware there&rsquo;s <a href="http://aws.amazon.com/elasticache/">Amazon&rsquo;s Elastic Cache</a> service for this, but i havent got around to reading up on that yet.</p>

<h3>Django apps</h3>

<p>As part of our goal not to reinvent the wheel. we used quite a few out-of-the-box django apps to facilitate building of Beebeta platform.</p>

<p><a href="http://boto.readthedocs.org/en/latest/ref/s3.html">S3Boto</a> is used to connect the server scripts with different Amazon web services seamlessly.</p>

<p><a href="http://pythonhosted.org/django-analytical/services/mixpanel.html">Django-analytical</a> is used to track various site metrics on the application itself.</p>

<p><a href="https://pypi.python.org/pypi/django-debug-toolbar">Django-debug-toolbar</a>(my favourite debugging tool!) is used on development environments for almost all debugging tasks.</p>

<p><a href="https://pypi.python.org/pypi/django-pagination">Django-pagination</a> is used to paginate database querysets into proper pages.</p>

<p><a href="http://south.readthedocs.org/en/latest/">Django-south</a> is used to easily perform database migration tasks between ORM and the database itself.</p>

<p><a href="https://bitbucket.org/ubernostrum/django-registration/">Django-registration</a> is used to handle user registration/login/logout issues.</p>

<h3>Monitoring</h3>

<p>We are using <a href="https://mixpanel.com">Mixpanel</a> to track user activites on the site. These tracking statistics are filtered up to 2 timeless campaigns. First campaign to track site traffic activites such as page traffic, user sign ups etc. Second campaign to track question and choices interactions of all questions on the site. At any one time we will know which questions are most popular or which group of users are most active at different times of the day.</p>

<p>For backend monitoring, we are using <a href="http://newrelic.com">New Relic</a> to track application performance and server performance. We establish a certain threshold for performance issues on both of these assets and issue warning emails to administrators when the threshold is almost reaching.</p>

<p>For Python error reporting, we use <a href="http://sentry.readthedocs.org/en/latest/">Sentry</a>, an open-source Django app written by the <a href="http://disqus.com">Disqus</a> folks. We can closely monitor error messages at real-time relatively easy with this handy tool.</p>

<h3>What&rsquo;s your stack?</h3>

<p>That&rsquo;s so much for Beebeta stack. Feel free to leave your comments below if you think we&rsquo;ve made a terrible mistake. Otherwise, I&rsquo;d love to hear how you implement your stacks!</p>

<p>Lastly, i&rsquo;ve been playing this song on repeats all day in my coding time. It just energizes me for the tasks at hand. Hope you like it too! :)</p>

<p><iframe width="560" height="420" src="http://www.youtube.com/embed/c_H3MWVx6JU?color=white&theme=light"></iframe></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[How to learn Javascript]]></title>
    <link href="http://blog.hguochen.com/web%20development/2014/03/15/How-to-learn-Javascript/"/>
    <updated>2014-03-15T15:35:12Z</updated>
    <id>http://blog.hguochen.com/web%20development/2014/03/15/How-to-learn-Javascript</id>
    <content type="html"><![CDATA[<p>One of my side projects required the use of jQuery and AJAX to add interactivity to the website. What is jQuery and AJAX? They are both frameworks built on top of its base language, javascript.I haven&rsquo;t alot of experiences dealing with javascript before so i&rsquo;ve no choice but to start from the base language.</p>

<p>Regardless of prior programming experiences, i would still recommend learning a new programming language the proper way. Grasping the correct syntax and coding conventions could help a long way. I took about 4 days going through a series of web resources to learning javascript and shortlisted some of the best tutorials. Just follow through step by step.</p>

<h3>0. Read up on fundamentals of Javascript</h3>

<blockquote><p>Javascript is the language of the browser.</p></blockquote>

<p>Javascript used to be a client-side programming language running client web scripts. It&rsquo;s primary purpose is to add interactivity to an otherwise static page. Javascript is normally used in conjunction with HTML &amp; CSS to enrich your web contents. However, it has become more popular as a server scripting language in recent years, with <a href="http://nodejs.org/%E2%80%8E">Node.js</a> being the new kid in town.</p>

<p><a href="http://eloquentjavascript.net/index.html">Eloquent Javascript</a> by Marjin Haverbeke, is available freely online. Besides introduction to the language in depth, it also covers coding style and using javascript in the browser. &ldquo;eloquent&rdquo; isn&rsquo;t an overstatement.</p>

<p><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/A_re-introduction_to_JavaScript">A Re-introduction to JavaScript</a>. This introduction is on the Mozilla Developers Network, and it&rsquo;s pretty dense in contents with many code examples. It would recommend quickly reading through to get a first impression of the language.</p>

<h3>1. Go through the Javascript course at Codecademy.com</h3>

<p><a href="www.codecademy.com">Codecademy</a> revamped its courses to learning javascript and touted itself as &ldquo;the easiest way to learn how to code&rdquo;. There are currently two courses on JS: &ldquo;Getting started with Programming&rdquo; and &ldquo;Javascript Quick Start Guide&rdquo; Both of these courses are awesome way to dip into the JS pool and get a feel of the syntax of the language.</p>

<p>If you are already familiar with other programming languages, you can start with &ldquo;Javascript Quick Start Guide&rdquo;. If you are fresh to programming, &ldquo;Getting started with programming&rdquo; is tailored for you. Codecademy is free, but sign up is required.</p>

<h3>2. Screencast tutorials at TheNewBoston</h3>

<p><a href="http://thenewboston.org/list.php?cat=10">The New Boston</a> for javascript has an awesome set of screencast tutorials geared for beginners. It&rsquo;s a good way for beginners to follow and get a feel of how javascript programs are structured. I generally like screencast tutorials alot more because it&rsquo;s easier to follow than written scripts.</p>

<h3>3. Install and Learn Firebug(or Chrome Developer Tools)</h3>

<p><a href="http://getfirebug.com/">Firebug</a> is a plugin for Firefox browser that assists you in building and debugging web pages. If you prefer <a href="www.google.com/chrome/">Google Chrome</a> or <a href="https://www.apple.com/sg/safari/%E2%80%8E">Safari</a>, check out the built-in developer tools.</p>

<blockquote><p>Open developer tools panel by press <code>Option + Cmd +I</code> on mac, or <code>Ctrl+Shift+I</code> on the PC.</p></blockquote>

<p>Check out some of the useful guides on using both of these tools:</p>

<ul>
<li>Firebug

<ul>
<li><a href="http://css-tricks.com/video-screencasts/15-introduction-to-firebug/">Introduction to Firebug</a> on <a href="http://css-tricks.com/">CSS-Tricks</a></li>
<li><a href="http://net.tutsplus.com/tutorials/other/10-reasons-why-you-should-be-using-firebug/">10 Reasons Why You Should Be Using Firebug</a></li>
</ul>
</li>
<li>Developer Tools

<ul>
<li><a href="http://code.google.com/chrome/devtools/">Developer Tools Website</a></li>
<li><a href="http://www.youtube.com/watch?v=nOEw9iiopwI&amp;feature=player_embedded">Google Chrome Developer Tools: 12 Tricks to Develop Quicker</a> by Paul Irish</li>
</ul>
</li>
</ul>


<h3>4. Begin Learning a JavaScript Library &ndash; jQuery</h3>

<p>The point of a javascript library is to sugar down the painful stuff, which could mean extensive amounts of coding just to achieve simple functionalities. There are quite a number of javascript libraries available for free over the web but <a href="http://jquery.com/">jQuery</a> is probably the most popular and widely used library. For a start, read through the <a href="http://learn.jquery.com/about-jquery/">jQuery Documentations</a> to get an idea of the ease of using javascript libraries as opposed to javascript raw language.</p>

<h3>5. Work through the tutorial at Try jQuery</h3>

<p><a href="http://try.jquery.com/">Try jQuery</a> is just like codecademy which offers hands on tutorial to learning jQuery. I find it most beneficial by constantly referring back to <a href="http://api.jquery.com">jQuery API</a> while going through the tutorial.</p>

<h3>6. Screencast jQuery tutorials at TheNewBoston</h3>

<p>Again, <a href="http://thenewboston.org/list.php?cat=32">The New Boston</a> for jQuery is a pretty good goto place to quickly get on hand with using jQuery optimally and see how professional use the library.</p>

<p>So the above pretty much summed up my 4 day adventure into javascript. I hope this plan can help you become good at javascript and build wonderful websites! If you have any other good javascript tutorials to recommend, please leave them in the comments below!</p>
]]></content>
  </entry>
  
</feed>
